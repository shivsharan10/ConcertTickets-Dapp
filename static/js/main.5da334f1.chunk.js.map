{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["require","BN","Long","bytes","units","toBech32Address","Zilliqa","StatusType","MessageType","App","useState","zilpayConnected","setZilpayConnected","isLoading","setIsLoading","isMinting","setIsMinting","isBatchMinting","setIsBatchMinting","isBatchBurning","setIsBatchBurning","ticketsUsed","setTicketsUsed","contractAddress","setContractAddress","tempContractAddress","setTempContractAddress","mintNumber","setMintNumber","contractState","setContractState","ownedTokensInformation","setOwnedTokensInformation","ownedTokenIDs","setOwnedTokenIDs","getKeyByValue","object","value","Object","keys","filter","key","constructBatchMintParameters","number","arr","i","push","constructor","argtypes","arguments","window","zilPay","wallet","defaultAccount","base16","connect","isConnect","alert","console","log","contractAddressBech32","contract","contracts","at","getState","contractDetails","walletAddress","toLowerCase","ownedTickets","token_owners","length","tokenURIs","map","base_uri","Promise","all","tokenURI","fetch","responses","json","tokenMetadata","zilliqa","VERSION","pack","myGasPrice","toQa","Units","Li","ftAddr","call","vname","type","version","amount","token_price","gasPrice","gasLimit","fromNumber","eventLogSubscription","batchMintParameters","batchBurnParameters","subscriber","subscriptionBuilder","buildEventLogSubscriptions","addresses","emitter","on","SUBSCRIBE_EVENT_LOG","event","EVENT_LOG","JSON","stringify","eventName","event_logs","_eventname","UNSUBSCRIBE","start","useEffect","updateContractDetails","className","onClick","size","placeholder","required","onChange","e","target","src","alt","width","token_name","contract_owner","max_token_supply","token_id_count","resources","uri","name","attributes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.5da334f1.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nconst { BN, Long, bytes, units } = require(\"@zilliqa-js/util\");\r\nconst { toBech32Address } = require(\"@zilliqa-js/crypto\");\r\nconst { Zilliqa } = require(\"@zilliqa-js/zilliqa\");\r\nconst { StatusType, MessageType } = require(\"@zilliqa-js/subscriptions\");\r\n\r\nfunction App() {\r\n  const [zilpayConnected, setZilpayConnected] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isMinting, setIsMinting] = useState(false);\r\n  const [isBatchMinting, setIsBatchMinting] = useState(false);\r\n  const [isBatchBurning, setIsBatchBurning] = useState(false);\r\n  const [ticketsUsed, setTicketsUsed] = useState(0);\r\n  const [contractAddress, setContractAddress] = useState(\"\");\r\n  const [tempContractAddress, setTempContractAddress] = useState(\"\");\r\n  const [mintNumber, setMintNumber] = useState(0);\r\n  const [contractState, setContractState] = useState({});\r\n  const [ownedTokensInformation, setOwnedTokensInformation] = useState(null);\r\n  const [ownedTokenIDs, setOwnedTokenIDs] = useState([]);\r\n\r\n  function getKeyByValue(object, value) {\r\n    return Object.keys(object).filter((key) => object[key] === value);\r\n  }\r\n\r\n  function constructBatchMintParameters(number) {\r\n    const arr = [];\r\n    for (let i = 0; i < number; i++)\r\n      arr.push({\r\n        constructor: \"Pair\",\r\n        argtypes: [\"ByStr20\", \"String\"],\r\n        arguments: [window.zilPay.wallet.defaultAccount.base16, \"\"],\r\n      });\r\n    return arr;\r\n  }\r\n\r\n  async function connectZilpay() {\r\n    try {\r\n      await window.zilPay.wallet.connect();\r\n      if (window.zilPay.wallet.isConnect) {\r\n       setZilpayConnected(true);\r\n      } else {\r\n       alert(\"Zilpay connection failed, try again...\");\r\n      }\r\n     } catch (error) {\r\n      console.log(error);\r\n     }\r\n  }\r\n\r\n  function updateContractAddress() {\r\n    setContractAddress(tempContractAddress);\r\n  }\r\n\r\n  async function updateContractDetails() {\r\n    try {\r\n      const contractAddressBech32 = toBech32Address(contractAddress);\r\n      const contract = window.zilPay.contracts.at(contractAddressBech32);\r\n      const contractDetails = await contract.getState();\r\n     setContractState(contractDetails);\r\n     const walletAddress =\r\n      window.zilPay.wallet.defaultAccount.base16.toLowerCase();\r\n     const ownedTickets = getKeyByValue(\r\n      contractDetails.token_owners,\r\n      walletAddress\r\n     );\r\n   \r\n     setOwnedTokensInformation(null);\r\n     if (ownedTickets.length !== 0) {\r\n      setOwnedTokenIDs(ownedTickets);\r\n      const tokenURIs = ownedTickets.map(\r\n       (value) => `${contractDetails.base_uri}${value}`\r\n      );\r\n      const responses = await Promise.all(\r\n       tokenURIs.map(async (tokenURI) => await fetch(tokenURI))\r\n      );\r\n      const tokenMetadata = await Promise.all(\r\n       responses.map(async (value) => await value.json())\r\n      );\r\n      setOwnedTokensInformation(tokenMetadata);\r\n     }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  async function handleMint() {\r\n    setIsMinting(true);\r\n const zilliqa = window.zilPay;\r\n const CHAIN_ID = 333;\r\n const MSG_VERSION = 1;\r\n const VERSION = bytes.pack(CHAIN_ID, MSG_VERSION);\r\n const myGasPrice = units.toQa(\"2000\", units.Units.Li);\r\n const ftAddr = toBech32Address(contractAddress);\r\n try {\r\n  const contract = zilliqa.contracts.at(ftAddr);\r\n  await contract.call(\r\n   \"Mint\",\r\n   [\r\n    {\r\n     vname: \"to\",\r\n     type: \"ByStr20\",\r\n     value: window.zilPay.wallet.defaultAccount.base16,\r\n    },\r\n    {\r\n     vname: \"token_uri\",\r\n     type: \"String\",\r\n     value: \"\",\r\n    },\r\n   ],\r\n   {\r\n    // amount, gasPrice and gasLimit must be explicitly provided\r\n    version: VERSION,\r\n    amount: new BN(contractState.token_price),\r\n    gasPrice: myGasPrice,\r\n    gasLimit: Long.fromNumber(10000),\r\n   }\r\n  );\r\n  await eventLogSubscription();\r\n } catch (error) {\r\n  console.log(error);\r\n }\r\n}\r\n\r\n  async function handleBatchMint() {\r\n    if (mintNumber === 0) {\r\n      return;\r\n     }\r\n     setIsBatchMinting(true);\r\n     const batchMintParameters = constructBatchMintParameters(mintNumber);\r\n     const zilliqa = window.zilPay;\r\n     const CHAIN_ID = 333;\r\n     const MSG_VERSION = 1;\r\n     const VERSION = bytes.pack(CHAIN_ID, MSG_VERSION);\r\n     const myGasPrice = units.toQa(\"2000\", units.Units.Li);\r\n     const ftAddr = toBech32Address(contractAddress);\r\n     try {\r\n      const contract = zilliqa.contracts.at(ftAddr);\r\n      await contract.call(\r\n       \"BatchMint\",\r\n       [\r\n        {\r\n         vname: \"to_token_uri_pair_list\",\r\n         type: \"List (Pair (ByStr20) (String))\",\r\n         value: batchMintParameters,\r\n        },\r\n       ],\r\n       {\r\n        // amount, gasPrice and gasLimit must be explicitly provided\r\n        version: VERSION,\r\n        amount: new BN(mintNumber * contractState.token_price),\r\n        gasPrice: myGasPrice,\r\n        gasLimit: Long.fromNumber(10000),\r\n       }\r\n      );\r\n      await eventLogSubscription();\r\n     } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  async function handleBatchBurn() {\r\n    setIsBatchBurning(true);\r\n const batchBurnParameters = ownedTokenIDs;\r\n setTicketsUsed(batchBurnParameters.length);\r\n const zilliqa = window.zilPay;\r\n const CHAIN_ID = 333;\r\n const MSG_VERSION = 1;\r\n const VERSION = bytes.pack(CHAIN_ID, MSG_VERSION);\r\n const myGasPrice = units.toQa(\"2000\", units.Units.Li);\r\n const ftAddr = toBech32Address(contractAddress);\r\n try {\r\n  const contract = zilliqa.contracts.at(ftAddr);\r\n  await contract.call(\r\n   \"BatchBurn\",\r\n   [\r\n    {\r\n     vname: \"token_id_list\",\r\n     type: \"List (Uint256)\",\r\n     value: batchBurnParameters,\r\n    },\r\n   ],\r\n   {\r\n    // amount, gasPrice and gasLimit must be explicitly provided\r\n    version: VERSION,\r\n    amount: new BN(0),\r\n    gasPrice: myGasPrice,\r\n    gasLimit: Long.fromNumber(10000),\r\n   }\r\n  );\r\n  await eventLogSubscription();\r\n } catch (error) {\r\n  console.log(error);\r\n }\r\n}\r\n\r\n  async function eventLogSubscription() {\r\n    const zilliqa = new Zilliqa(\"https://dev-api.zilliqa.com\");\r\n    const subscriber = zilliqa.subscriptionBuilder.buildEventLogSubscriptions(\r\n      \"wss://dev-ws.zilliqa.com\",\r\n      {\r\n        // smart contract address you want to listen on\r\n        addresses: [contractAddress],\r\n      }\r\n    );\r\n\r\n    subscriber.emitter.on(StatusType.SUBSCRIBE_EVENT_LOG, (event) => {\r\n      // if subscribe success, it will echo the subscription info\r\n      console.log(\"get SubscribeEventLog echo: \", event);\r\n    });\r\n\r\n    subscriber.emitter.on(MessageType.EVENT_LOG, (event) => {\r\n      // do what you want with new event log\r\n      console.log(\"get new event log: \", JSON.stringify(event));\r\n      if (event.value) {\r\n        const eventName = event.value[0].event_logs[0]._eventname;\r\n        if (eventName === \"Mint\") {\r\n          setIsMinting(false);\r\n        }\r\n        if (eventName === \"BatchMint\") {\r\n          setIsBatchMinting(false);\r\n        }\r\n        if (eventName === \"Burn\") {\r\n          setIsBatchBurning(false);\r\n        }\r\n        setIsLoading(true);\r\n      }\r\n    });\r\n\r\n    subscriber.emitter.on(MessageType.UNSUBSCRIBE, (event) => {\r\n      //if unsubscribe success, it will echo the unsubscription info\r\n      console.log(\"get unsubscribe event: \", event);\r\n    });\r\n\r\n    await subscriber.start();\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (contractAddress) {\r\n      updateContractDetails();\r\n    }\r\n    setIsLoading(false);\r\n  }, [contractAddress, isLoading]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Project Concert Tickets</h1>\r\n        {zilpayConnected === false ? (\r\n          <div>\r\n            <p>Connect your ZilPay wallet to get started!</p>\r\n            <button onClick={connectZilpay}>Connect ZilPay</button>\r\n          </div>\r\n        ) : contractAddress === \"\" ? (\r\n          <div>\r\n            <label>\r\n              Contract address:{\" \"}\r\n              <input\r\n                type=\"text\"\r\n                size=\"40\"\r\n                placeholder=\"Base16 format\"\r\n                required\r\n                onChange={(e) => setTempContractAddress(e.target.value)}\r\n              />\r\n              <button onClick={updateContractAddress}>Submit</button>\r\n            </label>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <img src=\"banner.png\" alt=\"Banner\" width=\"800\" />\r\n            <br />\r\n            <div className=\"grid\">\r\n              <div>\r\n                <h3>\r\n                  <u>Contract Information</u>\r\n                </h3>\r\n                <p>Address: {contractAddress}</p>\r\n                <p>Name: {contractState.token_name}</p>\r\n                <p>Owner: {contractState.contract_owner}</p>\r\n                <p>Price: {contractState.token_price / 1000000 || \"\"} LI</p>\r\n                <p>Total Tickets: {contractState.max_token_supply}</p>\r\n              </div>\r\n              <div>\r\n                <h3>\r\n                  <u>Purchasing Counter</u>\r\n                </h3>\r\n                <p>No. of Tickets sold: {contractState.token_id_count}</p>\r\n                <p>\r\n                  No. of Tickets left:{\" \"}\r\n                  {contractState.max_token_supply -\r\n                    contractState.token_id_count || 0}\r\n                </p>\r\n                {(isMinting && <div className=\"loader\" />) ||\r\n                  (contractState.max_token_supply -\r\n                    contractState.token_id_count ===\r\n                    0 && (\r\n                    <div>\r\n                      <p>Tickets are sold out!</p>\r\n                    </div>\r\n                  )) || (\r\n                    <button onClick={handleMint}>Purchase Single Ticket</button>\r\n                  )}\r\n                <br />\r\n                <br />\r\n                {(isBatchMinting && <div className=\"loader\" />) ||\r\n                  (contractState.max_token_supply -\r\n                    contractState.token_id_count !==\r\n                    0 && (\r\n                    <div>\r\n                      <input\r\n                        type=\"number\"\r\n                        placeholder=\"Number of Tickets\"\r\n                        onChange={(e) => setMintNumber(e.target.value)}\r\n                      />\r\n                      <button onClick={handleBatchMint}>Group Purchase</button>\r\n                    </div>\r\n                  ))}\r\n              </div>\r\n              <div>\r\n                <h3>\r\n                  <u>Concert Entry</u>\r\n                </h3>\r\n                {ticketsUsed !== 0 && !isBatchBurning ? (\r\n                  <p>\r\n                    {window.zilPay.wallet.defaultAccount.base16} has been\r\n                    granted access for {ticketsUsed} pax!\r\n                  </p>\r\n                ) : !ownedTokensInformation ? (\r\n                  <p>You have no concert tickets!</p>\r\n                ) : isBatchBurning ? (\r\n                  <div className=\"loader\" />\r\n                ) : (\r\n                  <button onClick={handleBatchBurn}>Use Tickets</button>\r\n                )}\r\n              </div>\r\n              <div>\r\n                <h3>\r\n                  <u>Your Concert Tickets</u>\r\n                </h3>\r\n                {!ownedTokensInformation ? (\r\n                  <div>\r\n                    <p>You have no concert tickets!</p>\r\n                  </div>\r\n                ) : (\r\n                  ownedTokensInformation.map((value, key) => {\r\n                    return (\r\n                      <div key={key}>\r\n                        <img\r\n                          src={value.resources[0].uri}\r\n                          alt=\"Token URI\"\r\n                          width=\"300\"\r\n                        />\r\n                        <p>Name: {value.name}</p>\r\n                        <p>\r\n                          Gate: {value.attributes[0].value} Row:{\" \"}\r\n                          {value.attributes[1].value} Seat:{\" \"}\r\n                          {value.attributes[2].value}\r\n                        </p>\r\n                      </div>\r\n                    );\r\n                  })\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}